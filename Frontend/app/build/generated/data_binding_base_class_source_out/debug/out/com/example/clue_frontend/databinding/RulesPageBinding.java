// Generated by view binder compiler. Do not edit!
package com.example.clue_frontend.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.clue_frontend.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RulesPageBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button exitbtn;

  @NonNull
  public final TextView goal;

  @NonNull
  public final TextView objectives;

  @NonNull
  public final TextView oword;

  @NonNull
  public final TextView rules;

  @NonNull
  public final TextView rulesText;

  private RulesPageBinding(@NonNull RelativeLayout rootView, @NonNull Button exitbtn,
      @NonNull TextView goal, @NonNull TextView objectives, @NonNull TextView oword,
      @NonNull TextView rules, @NonNull TextView rulesText) {
    this.rootView = rootView;
    this.exitbtn = exitbtn;
    this.goal = goal;
    this.objectives = objectives;
    this.oword = oword;
    this.rules = rules;
    this.rulesText = rulesText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RulesPageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RulesPageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.rules_page, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RulesPageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.exitbtn;
      Button exitbtn = ViewBindings.findChildViewById(rootView, id);
      if (exitbtn == null) {
        break missingId;
      }

      id = R.id.goal;
      TextView goal = ViewBindings.findChildViewById(rootView, id);
      if (goal == null) {
        break missingId;
      }

      id = R.id.objectives;
      TextView objectives = ViewBindings.findChildViewById(rootView, id);
      if (objectives == null) {
        break missingId;
      }

      id = R.id.oword;
      TextView oword = ViewBindings.findChildViewById(rootView, id);
      if (oword == null) {
        break missingId;
      }

      id = R.id.rules;
      TextView rules = ViewBindings.findChildViewById(rootView, id);
      if (rules == null) {
        break missingId;
      }

      id = R.id.rulesText;
      TextView rulesText = ViewBindings.findChildViewById(rootView, id);
      if (rulesText == null) {
        break missingId;
      }

      return new RulesPageBinding((RelativeLayout) rootView, exitbtn, goal, objectives, oword,
          rules, rulesText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
