// Generated by view binder compiler. Do not edit!
package com.example.clue_frontend.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.clue_frontend.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEndGameWinOrLoseBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView room;

  @NonNull
  public final ImageView suspect;

  @NonNull
  public final ImageView weapon;

  @NonNull
  public final TextView winLose;

  @NonNull
  public final ConstraintLayout winnerPage;

  private ActivityEndGameWinOrLoseBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView room, @NonNull ImageView suspect, @NonNull ImageView weapon,
      @NonNull TextView winLose, @NonNull ConstraintLayout winnerPage) {
    this.rootView = rootView;
    this.room = room;
    this.suspect = suspect;
    this.weapon = weapon;
    this.winLose = winLose;
    this.winnerPage = winnerPage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEndGameWinOrLoseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEndGameWinOrLoseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_end_game_win_or_lose, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEndGameWinOrLoseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.room;
      ImageView room = ViewBindings.findChildViewById(rootView, id);
      if (room == null) {
        break missingId;
      }

      id = R.id.suspect;
      ImageView suspect = ViewBindings.findChildViewById(rootView, id);
      if (suspect == null) {
        break missingId;
      }

      id = R.id.weapon;
      ImageView weapon = ViewBindings.findChildViewById(rootView, id);
      if (weapon == null) {
        break missingId;
      }

      id = R.id.winLose;
      TextView winLose = ViewBindings.findChildViewById(rootView, id);
      if (winLose == null) {
        break missingId;
      }

      ConstraintLayout winnerPage = (ConstraintLayout) rootView;

      return new ActivityEndGameWinOrLoseBinding((ConstraintLayout) rootView, room, suspect, weapon,
          winLose, winnerPage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
