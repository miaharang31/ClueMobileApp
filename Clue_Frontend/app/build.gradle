plugins {
    id 'com.android.application'
}




android {
    namespace 'com.example.clue_frontend'
    compileSdk 33

    buildFeatures{
        viewBinding true
    }

    testOptions {
        unitTests.includeAndroidResources = true

    }

    defaultConfig {
        applicationId "com.example.clue_frontend"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug{
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


task myassemble(type: GradleBuild) {
    tasks = ['assemble']
}

task javadoc(type: Javadoc, dependsOn: 'myassemble') {
    doFirst {
        configurations.implementation
                .filter { it.name.endsWith('.aar') }
                .each { aar ->
                    copy {
                        from zipTree(aar)
                        include "**/classes.jar"
                        into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
                    }
                }
        copy {
            from "$buildDir/generated/data_binding_base_class_source_out/debug/out/com/example/clue_frontend"
            into 'src/main/java/com/example/clue_frontend'
        }
    }

    configurations.implementation.setCanBeResolved(true)
    classpath = files(new File("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"))
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")
    //classpath += fileTree(dir: "$buildDir/generated/")

    android.applicationVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    source = android.sourceSets.main.java.srcDirs
    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    options.memberLevel = JavadocMemberLevel.PRIVATE
    failOnError false
    exclude '**/R.java'

    doLast{
        delete 'src/main/java/com/example/clue_frontend/databinding'
    }
}



dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    //implementation 'org.testng:testng:6.9.6'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.databinding:viewbinding'
    implementation 'org.java-websocket:Java-WebSocket:1.4.1'
}
